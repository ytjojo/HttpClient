apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def isTravis = "true".equals(System.getenv("TRAVIS"))
def packageTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    signingConfigs {
//        debug {
//
//        }
        release {
            //storeFile file("../yourapp.keystore")
            //storePassword "your password"
            //keyAlias "your alias"
            //keyPassword "your password"

            //setting your signing.properties
            //first, add signing.properties to ./app/
            //second, add property STORE_FILE, STORE_PASSWORD, KEY_ALIAS, KEY_PASSWORD
        }
    }
    defaultConfig {
//            vectorDrawables.useSupportLibrary = true
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode  rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true
        if (isDebug.toBoolean()) {
            buildConfigField 'boolean', 'isAPP', 'false'
        } else {
            buildConfigField 'boolean', 'isAPP', 'true'
        }
        buildConfigField 'String', 'MIXPANEL_TOKEN', '\"' + applicationId + "\""
//        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }



    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/ASL2.0'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            versionNameSuffix " Debug"
            debuggable true
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //Needed because of this https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
        abortOnError false
    }
    testOptions {

        unitTests.returnDefaultValues = true
    }
    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']//重新配置路径
        }
    }
}

project.configurations.all {
//    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'//不使用缓存，使用仓库中最新的包
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}
//android.variantFilter { variant ->
//    if(variant.buildType.name.equals('release')
//            && variant.getFlavors().get(0).name.equals('mock')) {
//        variant.setIgnore(true);
//    }
//}

dependencies {

    api fileTree(dir: 'libs', include: ['*.jar'])
    api project(':http')
    testImplementation 'junit:junit:4.12'
    api rootProject.ext.kotlinStdlib
    api rootProject.ext.kotlin_stdlib_jdk8
    testImplementation rootProject.ext.kotlinStdlib
    testImplementation rootProject.ext.kotlin_stdlib_jdk8
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    api fragmentktx
    api lifecycle_runtime_ktx
    api lifecycle_livedata_ktx
    api ifecycle_viewmodel_ktx
    api lifecycle_service

    api glide
    annotationProcessor glideProcessor


}
configurations {
    androidTestImplementation.exclude group: 'com.android.support', module: 'support-v4'
}
def propFile = project.rootProject.file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}

