package gradle

import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

def appendVersionNameVersionCode(applicationVariants) {
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null) {
                def PREFIX = "My_APP_"
                if (outputFile.name.endsWith('.apk') && !outputFile.name.startsWith(PREFIX)) {
                    def names = variant.baseName.split("-");
                    def apkName = PREFIX+names[0]+"_";
                    if(names[1].equals(android.buildTypes.debugEx.name)) {
                        apkName += 'debugEx_'
                    } else {
                        apkName += new SimpleDateFormat("YYYYMMdd").format(new Date())
                    }
                    if(variant.name.toLowerCase().contains(android.buildTypes.release.name)) {
                        if (outputFile.name.contains('unsigned')) {
                            apkName += "-unsigned"
                        } else {
                            apkName += "_SIGNED"
                        }
                    }
                    if (!variant.outputs.zipAlign) {
                        apkName += "-unaligned"
                    }
                    apkName += ".apk"
                    println outputFile.name+" --> " + apkName
                    output.outputFile = new File(outputFile.parent, apkName)
                }
            }
        }
    }
}

def retrieveVersionCode(variantName) {
    def manifestFile = file("src/$variantName/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    return Integer.parseInt(matcher.group(1))
}

def retrieveVersionName(variantName) {
    def manifestFile = file("src/$variantName/AndroidManifest.xml")
    def pattern = Pattern.compile(Pattern.quote("versionName=\"") + "(.*?)"+ Pattern.quote("\""))
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    return matcher.group(1)
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.0"

    lintOptions {
        abortOnError false
        absolutePaths false
        lintConfig file("lint.xml")
    }

    defaultConfig {
        applicationId "com.app.sportcam"
        minSdkVersion 8
        targetSdkVersion 21
    }

    if(project.hasProperty("app.signing")
            && new File(project.property("app.signing")+'.gradle').exists()) {
        apply from: project.property("app.signing")+'.gradle';
    } else {
        println 'Warning, signing credential not found: ' + project.property("app.signing")+'.gradle'
    }

    buildTypes {
        all {
            buildConfigField 'String', 'IP', '"192.168.1.1"'
            buildConfigField 'String', 'RTSP_IP', '"rtsp://"+IP+"/"'

            //debugging
            buildConfigField 'boolean', 'DEBUG_DETAILED', 'false'
            buildConfigField 'boolean', 'DEBUG_UI_STATE', 'false'
            buildConfigField 'boolean', 'INTERNAL_DEBUG', 'false'
            buildConfigField 'boolean', 'ENABLE_VIEWSERVER', 'false'
            buildConfigField 'boolean', 'INJECT_PTP_PROPERTIES', 'false'

            //functional
            buildConfigField 'boolean', 'ENABLE_TIME_LIMIT', 'false'
            buildConfigField 'boolean', 'HIDE_ACTIONBAR_ON_LANDSCAPE', 'false'
            buildConfigField 'boolean', 'ENABLE_VIDEO_DOWNLOAD', 'true'
            buildConfigField 'boolean', 'ENABLE_VIDEO_DOWNLOAD_PROGRESS', 'true'
            buildConfigField 'boolean', 'ENABLE_VIDEO_DOWNLOAD_CANCEL', 'false'
            buildConfigField 'boolean', 'SET_TIME', 'true'
            buildConfigField 'boolean', 'SHOULD_SET_CAMERA_MODE_WHEN_TURNING_RECORDING_OFF', 'false'
            buildConfigField 'boolean', 'SHOULD_SET_CAMERA_MODE_ON_CONNECTION', 'false'

            appendVersionNameVersionCode(applicationVariants)
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        //for customers' testing
        debug {
            buildConfigField 'boolean', 'ENABLE_TIME_LIMIT', 'true'
        }

        //for internal testing
        debugEx {
            buildConfigField 'boolean', 'DEBUG_DETAILED', 'true'
            buildConfigField 'boolean', 'INTERNAL_DEBUG', 'true'
            buildConfigField 'boolean', 'ENABLE_VIEWSERVER', 'true'
            buildConfigField 'boolean', 'INJECT_TEST_PROPERTIES', 'true'

            debuggable true
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    def time=Calendar.getInstance()
    time.add(Calendar.MONTH, 3)
    println 'Debug build expiry date='+time.getTime()

    productFlavors {
        // default BuildConfig variables
        all {
            buildConfigField 'long', 'TIME_LIMIT', time.getTimeInMillis()+'l'

            buildConfigField 'boolean', 'ADD_ABOUT', 'true'

            buildConfigField 'boolean', 'FORCE_DEVICE_CHECK', 'false'

            buildConfigField 'boolean', 'SHOW_CUR_SELECTION_PREF', 'true'
            buildConfigField 'boolean', 'SHOW_CUR_SELECTION_ONSCREEN', 'false'

            buildConfigField 'boolean', 'NO_WIFI_SCREEN', 'true'
            buildConfigField 'boolean', 'NO_STREAMING', 'false'
            buildConfigField 'boolean', 'NO_GALLERY', 'false'

            buildConfigField 'boolean', 'INIT_IN_START', 'true'

            buildConfigField 'boolean', 'CUSTOM_FUNCTIONS', 'true'

            buildConfigField 'boolean', 'ENABLE_TIMEOUT_CONTINUE', 'false'

            buildConfigField 'boolean', 'TRANSPARENT_BOTTOM_BAR', 'false'

            buildConfigField 'int', 'LOGO_TIMING', '1000'
        }

        defaults{
            //mandatory
            buildConfigField 'int', 'CUSTOMER_NAME_PREFIX', '0xFF'

            buildConfigField 'boolean', 'ADD_ABOUT', 'false'

            applicationId = 'com.app.default'
            def variantName='DEFAULT'
            versionCode retrieveVersionCode(variantName)
            versionName retrieveVersionName(variantName)
        }

        Customer_1 {
            //mandatory
            buildConfigField 'int', 'CUSTOMER_NAME_PREFIX', '0x0B'

            buildConfigField 'boolean', 'FORCE_DEVICE_CHECK', 'true'

            applicationId 'com.app.c1'
            def variantName='c1'
            versionCode retrieveVersionCode(variantName)
            versionName retrieveVersionName(variantName)
        }

        Customer_2 {
            //mandatory
            buildConfigField 'int', 'CUSTOMER_NAME_PREFIX', '0xFF' //TODO not final

            buildConfigField 'boolean', 'SHOW_CUR_SELECTION_ONSCREEN', 'true'

            applicationId 'com.app.c2'
            def variantName='c2'
            versionCode retrieveVersionCode(variantName)
            versionName retrieveVersionName(variantName)
        }

        Customer_3 {
            //mandatory
            buildConfigField 'int', 'CUSTOMER_NAME_PREFIX', '0x12'
            buildConfigField 'int', 'LOGO_TIMING', '3000'

            applicationId = 'com.app.c3'
            def variantName='c3'
            versionCode retrieveVersionCode(variantName)
            versionName retrieveVersionName(variantName)
        }

        Customer_4 {
            //mandatory
            buildConfigField 'int', 'CUSTOMER_NAME_PREFIX', '0x02'

            applicationId = 'com.app.c4'
            def variantName='c4'
            versionCode retrieveVersionCode(variantName)
            versionName retrieveVersionName(variantName)
        }

        Customer_5 {
            //mandatory
            buildConfigField 'int', 'CUSTOMER_NAME_PREFIX', '0x04'

            applicationId = 'com.app.c5'
            def variantName='c5'
            versionCode retrieveVersionCode(variantName)
            versionName retrieveVersionName(variantName)
        }

        Customer_6 {
            //mandatory
            buildConfigField 'int', 'CUSTOMER_NAME_PREFIX', '0xFF'

            applicationId = 'com.app.c6'
            def variantName='c6'
            versionCode retrieveVersionCode(variantName)
            versionName retrieveVersionName(variantName)
        }

        Customer_7 {
            //mandatory
            buildConfigField 'int', 'CUSTOMER_NAME_PREFIX', '0x14'

            buildConfigField 'boolean', 'FORCE_DEVICE_CHECK', 'true'

            applicationId = 'com.app.c7'
            def variantName='c7'
            versionCode retrieveVersionCode(variantName)
            versionName retrieveVersionName(variantName)
        }
    }

    sourceSets{
        main {
            res.srcDirs = ['src/main/res']
        }

        defaults {
            res.srcDir 'src/_Strings_/Standard'
            res.srcDir 'src/_Strings_/xx'
        }

        Customer_1 {
            res.srcDir 'src/_Strings_/Standard'
            res.srcDir 'src/_Strings_/xx'
        }

        Customer_2 {
            res.srcDir 'src/_Strings_/Standard'
            res.srcDir 'src/_Strings_/xx'
        }

        Customer_3 {
            res.srcDir 'src/_Strings_/Standard'
            res.srcDir 'src/_Strings_/xx'
            res.srcDir 'src/_Strings_/yy'
        }

        Customer_4 {
            res.srcDir 'src/_Strings_/Standard'
            res.srcDir 'src/_Strings_/xx'
        }

        Customer_5 {
            res.srcDir 'src/_Strings_/xx'
            res.srcDir 'src/_Strings_/zz'
        }

        Customer_6 {
            res.srcDir 'src/_Strings_/xx'
            res.srcDir 'src/_Strings_/aa'
        }

        Customer_7 {
            res.srcDir 'src/_Strings_/Standard'
            res.srcDir 'src/_Strings_/xx'
        }
    }
}

import java.util.regex.Pattern
def variantNameRegex = Pattern.quote("generate") + "(.*?)"+ Pattern.quote("BuildConfig")
Pattern patternVariantName = Pattern.compile(variantNameRegex);
tasks.whenTaskAdded { task ->
    //TODO disables lint
    if (task.name.startsWith("lint")) {
        println 'Disables lint task: '+task.name
        task.enabled = false
    }

    def m = patternVariantName.matcher(task.name)
    if (m.find()) {
        def variantName = m.group(1)
        def isRelease=false
        if (variantName.endsWith('Debug')) {
            variantName = variantName.substring(0, variantName.lastIndexOf('Debug'))
        } else if (variantName.endsWith('Release')) {
            variantName = variantName.substring(0, variantName.lastIndexOf('Release'))
            isRelease=true;
        } else {
            return
        }

        def taskIncVerCode="increaseVersionCode$variantName"
        if(!project.hasProperty(taskIncVerCode)) {
            project.task(taskIncVerCode) << {
                def manifestFile = file("src/$variantName/AndroidManifest.xml")
                def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
                def manifestText = manifestFile.getText()
                def matcher = pattern.matcher(manifestText)
                matcher.find()
                def versionCode = Integer.parseInt(matcher.group(1))
                def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
                manifestFile.write(manifestContent)
            }
        }
        task.dependsOn taskIncVerCode

        if(isRelease) {
            def taskIncVerName="increaseVersionName$variantName"
            if(!project.hasProperty(taskIncVerName)) {
                project.task(taskIncVerName) << {
                    def manifestFile = file("src/$variantName/AndroidManifest.xml")
                    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\"")
                    def manifestText = manifestFile.getText()
                    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
                    matcherVersionNumber.find()
                    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
                    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
                    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
                    def mNextVersionName = majorVersion + "." + minorVersion + "." + (pointVersion + 1)
                    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
                    manifestFile.write(manifestContent)
                }
            }
            task.dependsOn taskIncVerName
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:21.0.0'
    compile files('libs/eventbus.jar')
    compile files('libs/libGoogleAnalyticsServices.jar')
    compile files('libs/trove-3.0.3.jar')
}