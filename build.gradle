// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        classpath 'com.fernandocejas.frodo:frodo-plugin:0.8.2'
        classpath 'me.tatarka:gradle-retrolambda:3.2.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        // required to find the project's artifacts
        maven { url "https://jitpack.io" }
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            url 'https://clojars.org/repo/'
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xbootclasspath/a:" + System.properties.get("java.home") + "/lib/rt.jar"
        }
    }
    tasks.withType(JavaCompile){
        options.encoding = "UTF-8"
        sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
        targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
    }

}
clean {
    delete rootProject.buildDir
}
task customClean(type: Delete) {
    delete rootProject.buildDir
}
clean.dependsOn customClean
ext {
    // Sdk and tools
    minSdkVersion = 15
    targetSdkVersion = 23
    compileSdkVersion = 23
    versionCode =1
    versionName ="1.0"
    buildToolsVersion = '23.0.2'

    // App dependencies
    supportLibraryVersion = '23.4.0'
    guavaVersion = '18.0'
    junitVersion = '4.12'
    mockitoVersion = '1.10.19'
    powerMockito = '1.6.2'
    hamcrestVersion = '1.3'
    runnerVersion = '0.4.1'
    rulesVersion = '0.4.1'
    espressoVersion = '2.2.1'
    retrofitVersion = '2.0.0-beta2'
    okhttploggingVersion = '2.6.0'
    rxjavaVersion = '1.1.0'
    rxbindingVersion = '0.2.0'
    glideVersion = '3.6.1'
    glideokhttpVersion = '1.3.1'
    photoviewVersion = '1.2.4'
}

gradle.beforeProject {project->

}
gradle.taskGraph.whenReady {taskGraph ->

}
//gradle.buildFinished{r
//
//}
configure(subprojects.findAll { it.name.startsWith("wear") }) {
    apply plugin:'com.android.application'
}
subprojects { proj ->
    apply plugin: 'jacoco'

    jacoco {
        version "0.7.1.201405082137"
    }

    task jacocoTestReport(type: JacocoReport) {
        group = "Reporting"
        description = "Generate Jacoco coverage reports after running tests."
        reports {
            xml.enabled = true
            html.enabled = true
        }
        classDirectories = fileTree(
                dir: 'build/intermediates/classes/debug',
                excludes: ['**/R*.class',
                           '**/BuildConfig*'])
        sourceDirectories = files('src/main/java')
        executionData = files('build/jacoco/testDebugUnitTest.exec')
        doFirst {
            files('build/intermediates/classes/debug').getFiles().each { file ->
                if (file.name.contains('$$')) {
                    file.renameTo(file.path.replace('$$', '$'))
                }
            }
        }
    }
}

jacoco {
    toolVersion "0.7.1.201405082137"
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    group = "Reporting"
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.jacocoTestReport)

    additionalSourceDirs = files('app/src/main/java')
    sourceDirectories = files('app/src/main/java')
    classDirectories = files('app/build/intermediates/classes/debug')
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
    }

    onlyIf = {
        true
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = files('app/src/main/java').flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { System.env.'CI' }
}