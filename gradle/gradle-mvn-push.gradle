/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

def localProperties = new Properties()
File file = rootProject.file('local.properties')
if (file.exists()) {
  //加载资源
  InputStream inputStream = file.newDataInputStream()
  localProperties.load(inputStream)
  try{
    inputStream.close()
  }catch(Exception e){

  }
  rootProject.ext.localProperties = localProperties

}

println(getReleaseRepositoryUrl())



def isReleaseBuild() {
  return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return rootProject.ext.localProperties.getProperty("RELEASE_REPOSITORY_URL",
          "https://oss.sonatype.org/service/local/staging/deploy/maven2/")
}

def getSnapshotRepositoryUrl() {
  return rootProject.ext.localProperties.getProperty('SNAPSHOT_REPOSITORY_URL',
          "https://oss.sonatype.org/content/repositories/snapshots/")
}

def getRepositoryUsername() {
  return rootProject.ext.localProperties.getProperty('SONATYPE_NEXUS_USERNAME', "")
}

def getRepositoryPassword() {
  return rootProject.ext.localProperties.getProperty('SONATYPE_NEXUS_PASSWORD', "")
}


afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        repository(url: uri(getReleaseRepositoryUrl())) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }
        snapshotRepository(url:uri( getSnapshotRepositoryUrl())) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL

          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
          }

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }

          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
            }
          }
        }
        pom.whenConfigured { pomp ->

          pomp.dependencies.forEach { dep ->

            println(dep.getVersion()+"  id " + dep.getArtifactId())
            if (dep.getVersion() == "unspecified") {
              println("--modify the dependenies module in pom.xml--->>" + dep.getArtifactId())
              dep.setGroupId(GROUP)
              dep.setVersion(VERSION_NAME)
              //pomp.dependencies.remove(dep)
              def targetProject = rootProject.findProject( dep.getArtifactId())
              if(targetProject != null){
                def projectProperties = new Properties()
                File propertiesFile = targetProject.file('gradle.properties')
                if (propertiesFile.exists()) {
                  //加载资源
                  InputStream inputStream = propertiesFile.newDataInputStream()
                  projectProperties.load(inputStream)
                  inputStream.close()
                  if(projectProperties.containsKey("GROUP")){
                    dep.setGroupId(projectProperties.get("GROUP"))
                  }
                  if(projectProperties.containsKey("VERSION_NAME")){
                    dep.setVersion(projectProperties.get("VERSION_NAME"))
                  }
                }
              }
            }

          }

        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  if (project.getPlugins().hasPlugin('com.android.application') ||
          project.getPlugins().hasPlugin('com.android.library')) {
    task install(type: Upload, dependsOn: assemble) {
      repositories.mavenInstaller {
        configuration = configurations.archives

        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL

          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
          }

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }

          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
            }
          }
        }
      }
    }

    task androidJavadocs(type: Javadoc) {
      source = android.sourceSets.main.java.source
      classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
      classifier = 'javadoc'
      from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
      classifier = 'sources'
      from android.sourceSets.main.java.source
    }
  } else {
    install {
      repositories.mavenInstaller {
        pom.groupId = GROUP
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = VERSION_NAME

        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL

          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
          }

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }

          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
            }
          }
        }
      }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
      classifier = 'sources'
      from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
      classifier = 'javadoc'
      from javadoc.destinationDir
    }
  }

  if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }

  artifacts {
    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
      archives androidSourcesJar
      archives androidJavadocsJar
    } else {
      archives sourcesJar
      archives javadocJar
    }
  }
}
